# -*- coding: utf-8 -*-
"""24MDS011_Big_Data_GUI (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ic_muAVLIETiWOvCsiqvBTHpb5PJj5D1
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import io
import base64

st.set_page_config(
    page_title="Bank Transactions Analyzer",
    page_icon="üè¶",
    layout="wide"
)

class BankTransactionAnalyzer:
    def __init__(self):
        self.data = None

    def upload_file(self):
        uploaded_file = st.file_uploader("Upload Bank Transactions CSV", type=['csv'])
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                df.columns = [col.strip() for col in df.columns]
                df['TransactionDate'] = pd.to_datetime(df['TransactionDate'])
                df['PreviousTransactionDate'] = pd.to_datetime(df['PreviousTransactionDate'])
                self.data = df
                st.success("Transaction data uploaded successfully!")
                st.dataframe(df.head())
            except Exception as e:
                st.error(f"Error: {str(e)}")

    def transaction_analysis(self, analysis_type):
        if self.data is None:
            st.warning("Please upload data first!")
            return

        if analysis_type == "Top Transactions by Amount":
            st.subheader("Top 10 Transactions by Amount")
            top_transactions = self.data.nlargest(10, 'TransactionAmount')
            st.dataframe(top_transactions[['TransactionID', 'AccountID', 'TransactionAmount', 'TransactionType']])
            
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(data=top_transactions, x='TransactionID', y='TransactionAmount')
            plt.xticks(rotation=45)
            plt.title('Top 10 Transactions by Amount')
            st.pyplot(fig)

        elif analysis_type == "Transaction Type Distribution":
            st.subheader("Transaction Type Distribution")
            type_dist = self.data['TransactionType'].value_counts()
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
            type_dist.plot(kind='bar', ax=ax1)
            ax1.set_title('Transaction Types Count')
            ax1.set_xlabel('Transaction Type')
            ax1.set_ylabel('Count')
            plt.xticks(rotation=45)
            
            type_amounts = self.data.groupby('TransactionType')['TransactionAmount'].mean()
            type_amounts.plot(kind='bar', ax=ax2)
            ax2.set_title('Average Amount by Transaction Type')
            ax2.set_xlabel('Transaction Type')
            ax2.set_ylabel('Average Amount')
            plt.xticks(rotation=45)
            
            plt.tight_layout()
            st.pyplot(fig)

    def customer_analysis(self, analysis_type):
        if self.data is None:
            st.warning("Please upload data first!")
            return

        if analysis_type == "Customer Age Analysis":
            st.subheader("Customer Age Distribution")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=self.data, x='CustomerAge', bins=30)
            plt.title('Customer Age Distribution')
            st.pyplot(fig)

            age_stats = self.data.groupby(pd.cut(self.data['CustomerAge'], 
                                               bins=[0, 25, 35, 45, 55, 65, 100],
                                               labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+']))
            avg_transaction = age_stats['TransactionAmount'].mean()
            st.write("Average Transaction Amount by Age Group:")
            st.write(avg_transaction)

    def main(self):
        st.title("Bank Transactions Analyzer üè¶")
        
        menu = ["Upload Data", "Transaction Analysis", "Customer Analysis"]
        choice = st.sidebar.selectbox("Menu", menu)
        
        if choice == "Upload Data":
            self.upload_file()
            
        elif choice == "Transaction Analysis":
            analysis_type = st.selectbox(
                "Select Analysis Type",
                ["Top Transactions by Amount", "Transaction Type Distribution"]
            )
            self.transaction_analysis(analysis_type)
            
        elif choice == "Customer Analysis":
            analysis_type = st.selectbox(
                "Select Analysis Type",
                ["Customer Age Analysis"]
            )
            self.customer_analysis(analysis_type)

if __name__ == '__main__':
    app = BankTransactionAnalyzer()
    app.main()

